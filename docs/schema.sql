-- =====================
-- СХЕМА: таблицы
-- =====================

-- Комнаты: произвольный строковый ID
create table if not exists public.rooms (
  id text primary key,
  created_at timestamptz default now()
);

-- Сообщения чата
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  room_id text not null references public.rooms(id) on delete cascade,
  author text not null,
  content text not null check (char_length(content) <= 4000),
  created_at timestamptz default now()
);

-- (опционально) Метрики событий
create table if not exists public.metrics (
  id bigint generated by default as identity primary key,
  event text not null,
  payload jsonb,
  created_at timestamptz default now()
);

-- =====================
-- ИНДЕКСЫ
-- =====================

create index if not exists idx_messages_room_created
  on public.messages (room_id, created_at desc);

-- =====================
-- ВКЛЮЧАЕМ RLS
-- =====================

alter table public.rooms enable row level security;
alter table public.messages enable row level security;
alter table public.metrics enable row level security;

-- =====================
-- ПОЛИТИКИ RLS
-- (чтение всем; insert с базовой валидацией; update/delete не разрешаем)
-- =====================

-- rooms
drop policy if exists "rooms select all" on public.rooms;
create policy "rooms select all"
  on public.rooms for select
  using (true);

drop policy if exists "rooms insert all" on public.rooms;
create policy "rooms insert all"
  on public.rooms for insert
  with check (char_length(id) between 3 and 100);

-- messages
drop policy if exists "messages select all" on public.messages;
create policy "messages select all"
  on public.messages for select
  using (true);

drop policy if exists "messages insert limited" on public.messages;
create policy "messages insert limited"
  on public.messages for insert
  with check (
    room_id is not null
    and char_length(content) <= 4000
  );

-- metrics (только insert; чтение с клиента не даём)
drop policy if exists "metrics insert" on public.metrics;
create policy "metrics insert"
  on public.metrics for insert
  with check (true);

-- =====================
-- ТРИГГЕР: хранить не более 100 сообщений на комнату
-- =====================

create or replace function public.trim_room_messages() returns trigger as $$
begin
  -- удалить всё старше 100 последних сообщений в этой комнате
  delete from public.messages m
  using (
    select id
    from public.messages
    where room_id = new.room_id
    order by created_at desc
    offset 100
  ) old
  where m.id = old.id;
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_trim_room_messages on public.messages;
create trigger trg_trim_room_messages
after insert on public.messages
for each row execute function public.trim_room_messages();

-- =====================
-- REALTIME публикация для таблицы messages
-- =====================

alter publication supabase_realtime add table public.messages;
