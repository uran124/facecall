-- =====================
-- СХЕМА: таблицы
-- =====================

-- Профили пользователей, ключ по Telegram
create table if not exists public.profiles (
  user_key text primary key,           -- 'tg:<id>'
  telegram_id bigint not null unique,
  username text,
  display_name text,
  avatar_url text,
  created_at timestamptz default now()
);

-- Комнаты: произвольный строковый ID
create table if not exists public.rooms (
  id text primary key,
  is_private boolean default true,
  created_at timestamptz default now()
);

-- Членство в комнатах (приватность)
create table if not exists public.room_members (
  room_id text references public.rooms(id) on delete cascade,
  user_key text references public.profiles(user_key) on delete cascade,
  role text check (role in ('owner','member')) default 'member',
  joined_at timestamptz default now(),
  primary key (room_id, user_key)
);

-- Сообщения чата
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  room_id text not null references public.rooms(id) on delete cascade,
  author_key text not null,
  content text not null check (char_length(content) <= 4000),
  created_at timestamptz default now()
);

-- (опционально) Метрики событий
create table if not exists public.metrics (
  id bigint generated by default as identity primary key,
  event text not null,
  payload jsonb,
  created_at timestamptz default now()
);

-- =====================
-- ИНДЕКСЫ
-- =====================

create index if not exists idx_messages_room_created
  on public.messages (room_id, created_at desc);

create index if not exists idx_room_members_user
  on public.room_members(user_key);

-- =====================
-- ВКЛЮЧАЕМ RLS
-- =====================

alter table public.profiles enable row level security;
alter table public.room_members enable row level security;
alter table public.rooms enable row level security;
alter table public.messages enable row level security;
alter table public.metrics enable row level security;

-- =====================
-- ХЕЛПЕР: текущий пользователь
-- =====================

create or replace view public._current_user as
select (auth.jwt() ->> 'sub') as user_key;

-- =====================
-- ПОЛИТИКИ RLS
-- =====================

-- profiles: читать и править только свой профиль
drop policy if exists "profiles self read" on public.profiles;
create policy "profiles self read"
  on public.profiles for select
  using (user_key = (select user_key from public._current_user));

drop policy if exists "profiles self write" on public.profiles;
create policy "profiles self write"
  on public.profiles for insert
  with check (user_key = (select user_key from public._current_user));

drop policy if exists "profiles self update" on public.profiles;
create policy "profiles self update"
  on public.profiles for update
  using (user_key = (select user_key from public._current_user));

-- rooms: видеть приватные комнаты только если я член; публичные видят все
drop policy if exists "rooms scoped" on public.rooms;
create policy "rooms scoped"
  on public.rooms for select
  using (
    not is_private
    or exists (
      select 1 from public.room_members m
      where m.room_id = id
        and m.user_key = (select user_key from public._current_user)
    )
  );

drop policy if exists "rooms insert all" on public.rooms;
create policy "rooms insert all"
  on public.rooms for insert
  with check (char_length(id) between 3 and 100);

-- room_members: читать свои членства
drop policy if exists "room_members self read" on public.room_members;
create policy "room_members self read"
  on public.room_members for select
  using (user_key = (select user_key from public._current_user));

-- messages: читать если я член комнаты; писать только член и только от своего user_key
drop policy if exists "messages select scoped" on public.messages;
create policy "messages select scoped"
  on public.messages for select
  using (
    exists (
      select 1 from public.room_members m
      where m.room_id = room_id
        and m.user_key = (select user_key from public._current_user)
    )
  );

drop policy if exists "messages insert member" on public.messages;
create policy "messages insert member"
  on public.messages for insert
  with check (
    author_key = (select user_key from public._current_user)
    and exists (
      select 1 from public.room_members m
      where m.room_id = room_id
        and m.user_key = (select user_key from public._current_user)
    )
  );

-- metrics (только insert; чтение с клиента не даём)
drop policy if exists "metrics insert" on public.metrics;
create policy "metrics insert"
  on public.metrics for insert
  with check (true);

-- =====================
-- ТРИГГЕР: хранить не более 100 сообщений на комнату
-- =====================

create or replace function public.trim_room_messages() returns trigger as $$
begin
  -- удалить всё старше 100 последних сообщений в этой комнате
  delete from public.messages m
  using (
    select id
    from public.messages
    where room_id = new.room_id
    order by created_at desc
    offset 100
  ) old
  where m.id = old.id;
  return new;
end;
$$ language plpgsql;

drop trigger if exists trg_trim_room_messages on public.messages;
create trigger trg_trim_room_messages
after insert on public.messages
for each row execute function public.trim_room_messages();

-- =====================
-- Автоматическое присоединение создателя комнаты
-- =====================

create or replace function public.handle_room_insert()
returns trigger
language plpgsql
security definer
as $$
declare k text := auth.jwt()->>'sub';
begin
  if k is not null then
    insert into public.room_members(room_id, user_key, role)
    values (new.id, k, 'owner')
    on conflict do nothing;
  end if;
  return new;
end;
$$;

drop trigger if exists trg_handle_room_insert on public.rooms;
create trigger trg_handle_room_insert
after insert on public.rooms
for each row execute function public.handle_room_insert();

-- =====================
-- RPC для присоединения к комнате
-- =====================

create or replace function public.join_room(p_room_id text)
returns void
language plpgsql
security definer
as $$
declare k text := (auth.jwt()->>'sub');
begin
  if k is null then raise exception 'unauthorized'; end if;
  insert into public.room_members(room_id, user_key, role)
  values (p_room_id, k, 'member')
  on conflict do nothing;
end;
$$;

-- =====================
-- REALTIME публикация для таблицы messages
-- =====================

alter publication supabase_realtime add table public.messages;

